{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","target","value","key","onAdd","current","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","title","onClick","preventDefault","removeHandler","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","newTodo","Date","now","prev","confirm","filter","AboutPage","history","useHistory","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d09b3ae1.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport const Navbar: React.FunctionComponent = () => (\n  <nav>\n    <div className=\"nav-wrapper indigo darken-1 p-5\">\n      <a href=\"/todo-ts\" className=\"brand-logo\">\n        Todo with TS\n      </a>\n      <ul className=\"right hide-on-med-and-down\">\n        <li>\n          <NavLink to=\"/todo-ts\">Todo List</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/todo-ts/about\">Information</NavLink>\n        </li>\n      </ul>\n    </div>\n  </nav>\n)\n","import React, { useRef } from 'react'\n\ninterface TodoFormProps {\n  onAdd(title: string): void\n}\n\nexport const TodoForm: React.FC<TodoFormProps> = props => {\n  // const [title, setTitle] = useState<string>('')\n  const ref = useRef<HTMLInputElement>(null)\n\n  // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   setTitle(event.target.value)\n  // }\n\n  const keyPressHandler = (event: any) => {\n    if (event.target.value !== '') {\n      if (event.key === 'Enter') {\n        props.onAdd(ref.current!.value)\n        ref.current!.value = ''\n        // console.log(title)\n        // setTitle('')\n      }\n    }\n\n  }\n\n  return (\n    <div className=\"input-field mt2\">\n      <input\n        // onChange={changeHandler}\n        // value={title}\n        ref={ref}\n        type=\"text\"\n        id=\"title\"\n        placeholder=\"Add your new task\"\n        onKeyPress={keyPressHandler}\n      />\n      <label htmlFor=\"title\" className=\"active\">\n        New task\n      </label>\n    </div>\n  )\n}\n","import React from 'react'\nimport { ITodo } from '../interfaces'\n\ntype TodoListProps = {\n  todos: ITodo[]\n  onToggle(checked: boolean, id: number): void\n  onRemove: (id: number) => void\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n  onRemove,\n  onToggle\n}) => {\n  if (todos.length === 0) {\n    return <p className=\"center\">No tasks yet!</p>\n  }\n\n  const removeHandler = (event: React.MouseEvent, id: number) => {\n    event.preventDefault()\n    onRemove(id)\n  }\n\n  const handleChange = (id: number) => (event: React.ChangeEvent<HTMLInputElement>) => onToggle(event.target.checked, id);\n\n  return (\n    <ul>\n      {todos.map(todo => {\n        const classes = ['todo']\n\n        if (todo.completed) {\n          classes.push('completed')\n        }\n\n        return (\n          <li className={classes.join(' ')} key={todo.id}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                // onChange={onToggle.bind(null, todo.id)}\n                onChange={handleChange(todo.id)}\n              />\n              <span>{todo.title}</span>\n              <i\n                className=\"material-icons red-text\"\n                onClick={event => removeHandler(event, todo.id)}\n              >\n                delete\n              </i>\n            </label>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { TodoForm } from '../components/TodoForm'\nimport { TodoList } from '../components/TodoList'\nimport { ITodo } from '../interfaces'\n\ndeclare var confirm: (question: string) => boolean\n\nexport const TodosPage: React.FC = () => {\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\n    setTodos(saved)\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n  const addHandler = (title: string) => {\n    const newTodo: ITodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    }\n    // setTodos([newTodo, ...todos])\n    setTodos(prev => [newTodo, ...prev])\n  }\n\n  const toggleHandler = (checked: boolean, id: number) => {\n    setTodos(prev =>\n      prev.map(todo => {\n        if (todo.id === id) {\n          todo.completed = checked\n        }\n        return todo\n      })\n    )\n  }\n\n  const removeHandler = (id: number) => {\n    const shoudRemove = confirm('Are you sure to delete this task?')\n    if (shoudRemove) {\n      setTodos(prev => prev.filter(todo => todo.id !== id))\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <TodoForm onAdd={addHandler} />\n\n      <TodoList\n        todos={todos}\n        onToggle={toggleHandler}\n        onRemove={removeHandler}\n      />\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nexport const AboutPage: React.FC = () => {\n  const history = useHistory()\n  return (\n    <>\n      <h1>Information Page</h1>\n      <h5>\n        Technology stack: Typescript, JavaScript, HTML, MaterializeCSS\n      </h5>\n      <br />\n      <hr />\n      <br />\n      <button className=\"btn waves-effect waves-light indigo darken-4\" onClick={() => history.push('/')}>\n        Back to Todo List\n      </button>\n    </>\n  )\n}\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { Navbar } from './components/Navbar'\nimport { TodosPage } from './pages/TodosPage'\nimport { AboutPage } from './pages/AboutPage'\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <div className=\"container\">\n        <Switch>\n          <Route component={TodosPage} path=\"/todo-ts\" exact />\n          <Route component={AboutPage} path=\"/todo-ts/about\" />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}